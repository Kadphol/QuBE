[{"/app/src/index.tsx":"1","/app/src/pages/App/index.tsx":"2","/app/src/axiosconfig.tsx":"3","/app/src/context/userContext.ts":"4","/app/src/routing/index.tsx":"5","/app/src/components/NavigationBar/index.tsx":"6","/app/src/components/NavigationBar/Profile.tsx":"7","/app/src/components/LoginModal/index.tsx":"8","/app/src/pages/Challenge/index.tsx":"9","/app/src/pages/Explore/index.tsx":"10","/app/src/pages/Playground/index.tsx":"11","/app/src/pages/Home/index.tsx":"12","/app/src/pages/Explore/MenuMap.tsx":"13","/app/src/components/sound/Music.tsx":"14","/app/src/components/Composer/Sidebar.tsx":"15","/app/src/components/Composer/index.tsx":"16","/app/src/components/Leaderboard/index.tsx":"17","/app/src/components/Quiz/index.tsx":"18","/app/src/components/DialogBox/index.tsx":"19","/app/src/components/Progressbar/index.tsx":"20","/app/src/components/IntroButton/index.tsx":"21","/app/src/components/DialogBox/Message.tsx":"22","/app/src/components/Leaderboard/person.tsx":"23"},{"size":522,"mtime":1605338698628,"results":"24","hashOfConfig":"25"},{"size":1338,"mtime":1609934120542,"results":"26","hashOfConfig":"25"},{"size":271,"mtime":1609156336007,"results":"27","hashOfConfig":"25"},{"size":110,"mtime":1609931463278,"results":"28","hashOfConfig":"25"},{"size":554,"mtime":1610797660390,"results":"29","hashOfConfig":"25"},{"size":2208,"mtime":1609931463506,"results":"30","hashOfConfig":"25"},{"size":1236,"mtime":1610458662940,"results":"31","hashOfConfig":"25"},{"size":1432,"mtime":1609931463532,"results":"32","hashOfConfig":"25"},{"size":2338,"mtime":1610963459491,"results":"33","hashOfConfig":"25"},{"size":821,"mtime":1610458662944,"results":"34","hashOfConfig":"25"},{"size":414,"mtime":1610792340800,"results":"35","hashOfConfig":"25"},{"size":6744,"mtime":1610458662946,"results":"36","hashOfConfig":"25"},{"size":1084,"mtime":1610458662943,"results":"37","hashOfConfig":"25"},{"size":953,"mtime":1609931463276,"results":"38","hashOfConfig":"25"},{"size":6801,"mtime":1610780668608,"results":"39","hashOfConfig":"25"},{"size":17419,"mtime":1610975239474,"results":"40","hashOfConfig":"25"},{"size":3927,"mtime":1610979327669,"results":"41","hashOfConfig":"25"},{"size":323,"mtime":1610804054464,"results":"42","hashOfConfig":"25"},{"size":1019,"mtime":1610458662939,"results":"43","hashOfConfig":"25"},{"size":1172,"mtime":1610458662942,"results":"44","hashOfConfig":"25"},{"size":290,"mtime":1605531994340,"results":"45","hashOfConfig":"25"},{"size":780,"mtime":1610458662938,"results":"46","hashOfConfig":"25"},{"size":2758,"mtime":1610979409914,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"79uxju",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":12,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},"/app/src/index.tsx",[],["101","102"],"/app/src/pages/App/index.tsx",[],"/app/src/axiosconfig.tsx",[],"/app/src/context/userContext.ts",[],"/app/src/routing/index.tsx",[],"/app/src/components/NavigationBar/index.tsx",[],"/app/src/components/NavigationBar/Profile.tsx",[],"/app/src/components/LoginModal/index.tsx",[],"/app/src/pages/Challenge/index.tsx",["103","104","105","106"],"import React, { Fragment } from 'react';\r\nimport Quiz from '../../components/Quiz'\r\nimport Leaderboard from '../../components/Leaderboard'\r\nimport { userContext } from '../../context/userContext';\r\nimport styled from 'styled-components'\r\nimport scene1 from '../../assets/challenge/scene2.jpg'\r\nimport scene2 from '../../assets/challenge/scene3.png'\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 50px 100px 50px;\r\n  border: solid grey;\r\n  height: 75vh;\r\n  display:flex;\r\n  position: relative;\r\n`\r\n\r\nconst Back = styled.div`\r\n  display:flex;\r\n  position: absolute;\r\n  right: 10px;\r\n  bottom: 10px;\r\n`\r\n\r\nvar Column = styled.div`\r\n  flex: 50rem;\r\n  opacity: 70%;\r\n  position:relative;\r\n  transition: flex 0.5s;\r\n  overflow: hidden;\r\n  &:hover {\r\n    flex: 100rem;\r\n    opacity: 100%;\r\n  }\r\n\r\n  #img {\r\n    float: left;\r\n    height: 100%;\r\n    width: auto;\r\n    object-fit: cover;\r\n  }\r\n  #img2 {\r\n    float: right;\r\n    height: 100%;\r\n    width: auto;\r\n    object-fit: cover;\r\n  }\r\n  #button {\r\n    top: 40%;\r\n    left: 40%;\r\n    position: absolute;\r\n    font-size: 40px;\r\n  }\r\n  #button2 {\r\n    top: 40%;\r\n    left: 30%;\r\n    position: absolute;\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\n\r\nclass Challenge extends React.Component {\r\n\r\n  state = {\r\n    select: 0\r\n  }\r\n\r\n  switch = (id) => {\r\n    this.setState({select:id})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Wrapper>\r\n          {this.state.select==0?\r\n          <Fragment>\r\n          <Column>\r\n              <img id=\"img\" src={scene1}/>\r\n              <button className=\"btn btn-primary\" id=\"button\"  onClick={()=>this.switch(1)}>เริ่มท้าทาย</button>\r\n          </Column>\r\n          <Column>\r\n            <img id=\"img2\" src={scene2}/>\r\n              <button className=\"btn btn-primary\" id=\"button2\" onClick={()=>this.switch(2)}>อันดับคะแนน</button>\r\n          </Column>\r\n          </Fragment>\r\n          :\r\n          this.state.select==1\r\n          ? <Quiz/>\r\n          : <userContext.Consumer>\r\n              {user=><Leaderboard {...user}/>}\r\n            </userContext.Consumer>\r\n          }\r\n          <Back>\r\n          {this.state.select!==0\r\n          ?<button className=\"btn btn-primary\" onClick={()=>this.switch(0)}>Back</button>\r\n          :null\r\n          }\r\n          </Back>\r\n        </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Challenge;","/app/src/pages/Explore/index.tsx",[],"/app/src/pages/Playground/index.tsx",[],"/app/src/pages/Home/index.tsx",[],"/app/src/pages/Explore/MenuMap.tsx",["107"],"import React from 'react';\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport map from '../../assets/explore/map1.png';\r\n\r\nconst Menu = styled.div`\r\n  background: url(${map});\r\n  width: 1240px;\r\n  height: 720px;\r\n`;\r\n\r\nexport default function MenuMap() {\r\n  let { path, url } = useRouteMatch();\r\n\r\n  const items = [{\r\n    path: url+'/chapter-1',\r\n    text: \"บทที่ 1: พื้นฐาน\"\r\n  }, {\r\n    path: url+'/chapter-2',\r\n    text: \"บทที่ 2: คิวบิต\"\r\n  }, {\r\n    path: url+'/chapter-3',\r\n    text: \"บทที่ 3: มาตรวัด\"\r\n  }, {\r\n    path: url+'/chapter-4',\r\n    text: \"บทที่ 4: ควอนตัมเกต\"\r\n  }, {\r\n    path: url+'/chapter-5',\r\n    text: \"บทที่ 5: อัลกอริทึม\"\r\n  }]\r\n  return (\r\n    <Menu >\r\n      <ul>\r\n        {items.map(item => (\r\n          <li key={item.path} className= \"mapmenu__item\">\r\n            <Link to={item.path}>{item.text}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </Menu>\r\n  )\r\n}","/app/src/components/sound/Music.tsx",[],"/app/src/components/Composer/Sidebar.tsx",["108","109","110","111","112"],"import React from 'react';\r\nimport { Accordion, Card, Button } from \"react-bootstrap\";\r\nimport './Sidebar.scoped.css'\r\nimport bellpair from '../../assets/playground/bellpair.png'\r\nimport Drag from './drag'\r\n\r\nconst detail:Array<string> = [\r\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n]\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    state = {\r\n        onShow: null,\r\n        active: -1\r\n    }\r\n\r\n    toggleShow = (id:number) => {\r\n        let menu = document.getElementById(\"Menu\")!\r\n        menu.style['width'] = this.state.onShow? '25vw':'68vw'\r\n\r\n        this.setState({onShow:!this.state.onShow, active:id})\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Menu\" id=\"Menu\">\r\n                <Accordion defaultActiveKey=\"0\">\r\n                    {this.state.onShow && this.state.active!== 0 ? null: <Card> \r\n                        <Card.Header >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                1: Bell Pair\r\n                        </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body>\r\n                                <img className=\"sampleCircuit\" src={bellpair} />\r\n                                <span className=\"detail\">{this.state.onShow? detail[0] : null}</span>\r\n                                <div className=\"buttonPanel2\">\r\n                                <button className=\"btn btn-primary\" onClick={()=>this.toggleShow(0)}>{this.state.onShow? \"ย้อนกลับ\":\"รายละเอียด\"}</button>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>}\r\n                    {this.state.onShow && this.state.active!== 1 ? null:<Card>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                2: Teleporation\r\n                        </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <Card.Body>\r\n                                <img className=\"sampleCircuit\" src={bellpair} />\r\n                                <span className=\"detail\">{this.state.onShow? detail[1] : null}</span>\r\n                                <div className=\"buttonPanel2\">\r\n                                <button className=\"btn btn-primary\" onClick={()=>this.toggleShow(1)}>{this.state.onShow? \"ย้อนกลับ\":\"รายละเอียด\"}</button>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>}\r\n                    {this.state.onShow && this.state.active!== 2 ? null:<Card>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\r\n                                3. Deutsch Jozsa algorithm\r\n                        </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"2\">\r\n                            <Card.Body>\r\n                            <img className=\"sampleCircuit\" src={bellpair} />\r\n                                <span className=\"detail\">{this.state.onShow? detail[2] : null}</span>\r\n                                <div className=\"buttonPanel2\">\r\n                                <button className=\"btn btn-primary\" onClick={()=>this.toggleShow(2)}>{this.state.onShow? \"ย้อนกลับ\":\"รายละเอียด\"}</button>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>}\r\n                    {this.state.onShow && this.state.active!== 3 ? null:<Card>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\r\n                                4. Grover's algorithm\r\n                        </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"3\">\r\n                            <Card.Body>\r\n                            <img className=\"sampleCircuit\" src={bellpair} />\r\n                                <span className=\"detail\">{this.state.onShow? detail[3] : null}</span>\r\n                                <div className=\"buttonPanel2\">\r\n                                <button className=\"btn btn-primary\" onClick={()=>this.toggleShow(3)}>{this.state.onShow? \"ย้อนกลับ\":\"รายละเอียด\"}</button>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>}\r\n                </Accordion>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;","/app/src/components/Composer/index.tsx",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129"],"import React from 'react';\r\nimport x from '../../assets/playground/x.png';\r\nimport xInuse from '../../assets/playground/x_Inuse.png'\r\nimport y from '../../assets/playground/y.png';\r\nimport yInuse from '../../assets/playground/y_Inuse.png';\r\nimport z from '../../assets/playground/z.png';\r\nimport zInuse from '../../assets/playground/z_Inuse.png';\r\nimport h from '../../assets/playground/h.png';\r\nimport hInuse from '../../assets/playground/h_Inuse.png';\r\nimport cx from '../../assets/playground/cx.png';\r\nimport cxInuse0 from '../../assets/playground/cx_Inuse_0.png';\r\nimport cxInuse1 from '../../assets/playground/cx_Inuse_1.png';\r\nimport cxInuse2 from '../../assets/playground/cx_Inuse_2.png';\r\nimport cxInuse3 from '../../assets/playground/cx_Inuse_3.png';\r\nimport cxInuse4 from '../../assets/playground/cx_Inuse_4.png';\r\nimport ccx from '../../assets/playground/ccx.png';\r\nimport ccxInuse00 from '../../assets/playground/ccx_Inuse_00.png';\r\nimport ccxInuse0 from '../../assets/playground/ccx_Inuse_0.png';\r\nimport ccxInuse1 from '../../assets/playground/ccx_Inuse_1.png';\r\nimport ccxInuse2 from '../../assets/playground/ccx_Inuse_2.png';\r\nimport ccxInuse3 from '../../assets/playground/ccx_Inuse_3.png';\r\nimport ccxInuse4 from '../../assets/playground/ccx_Inuse_4.png';\r\nimport ccxInuse5 from '../../assets/playground/ccx_Inuse_5.png';\r\nimport m from '../../assets/playground/m.png';\r\nimport eInuse from '../../assets/playground/e.png';\r\nimport q1 from '../../assets/playground/q1.png';\r\nimport q2 from '../../assets/playground/q2.png';\r\nimport q3 from '../../assets/playground/q3.png';\r\nimport q4 from '../../assets/playground/q4.png';\r\nimport q5 from '../../assets/playground/q5.png';\r\nimport './Composer.scoped.css';\r\nimport axios from '../../axiosconfig';\r\nimport { Row } from 'react-bootstrap';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {ReactComponent as Qubie} from '../../svg/Qubie-intro.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst image: { [id: string]: string; } = { 'x': x, 'y': y, 'z': z, 'h': h, 'cx': cx, 'ccx': ccx };\r\nconst imageInuse: { [id: string]: string; } = {\r\n    'x': xInuse, 'y': yInuse, 'z': zInuse, 'h': hInuse, 'e': eInuse,\r\n    'cx0': cxInuse0, 'cx1': cxInuse1, 'cx2': cxInuse2, 'cx3': cxInuse3, 'cx4': cxInuse4,\r\n    'ccx00': ccxInuse00, 'ccx0': ccxInuse0, 'ccx1': ccxInuse1, 'ccx2': ccxInuse2, 'ccx3': ccxInuse3, 'ccx4': ccxInuse4, 'ccx5': ccxInuse5,\r\n};\r\nconst qubit: { [id:number]: string; } = { 0:q1, 1:q2, 2:q3, 3:q4, 4:q5,}\r\nconst eLine = Array(13).fill('e')\r\n\r\nconst QubieWrapper = styled.div`\r\n    transform: scaleX(-1);\r\n    height: 200px;\r\n    width: 200px;\r\n    right: -240px;\r\n    bottom: 70px;\r\n    position: absolute;  \r\n`;\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    active: string;\r\n    activeElement: HTMLElement;\r\n    placingGate: Array<Array<number>>;\r\n    multipleGate: Array<Array<Array<number>>>;\r\n    n: number;\r\n    ccimg: string[][];\r\n    cc: string[];\r\n    result: {\r\n        labels: Array<string>,\r\n        datasets: Array<{\r\n            backgroundColor: string;\r\n            borderColor: string;\r\n            borderWidth: number;\r\n            data: Array<number>;\r\n        }>\r\n    }\r\n}\r\n\r\nconst el: HTMLElement = document.getElementById('Composer')!;\r\n\r\nclass Composer extends React.Component<IProps, IState>{\r\n\r\n    state = {\r\n        active: 'e',\r\n        activeElement: el,\r\n        placingGate: Array(),\r\n        multipleGate: Array(),\r\n        n: 2,\r\n        ccimg: [eLine.slice(), eLine.slice()],\r\n        cc: Array(),\r\n        result: {\r\n            labels: ['00', '01', '10', '11'],\r\n            datasets: [\r\n                {\r\n                    backgroundColor: 'rgba(75,192,192,1)',\r\n                    borderColor: 'rgba(0,0,0,1)',\r\n                    borderWidth: 2,\r\n                    data: [0, 0, 0, 0]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    run = (): void => {\r\n        axios.post('http://localhost/sim', { n: this.state.n, cc: this.state.cc })\r\n            .then((res) => {\r\n                let result = this.state.result\r\n                result.labels = res.data.labels\r\n                result.datasets[0].data = res.data.values\r\n                this.setState({ result: result })\r\n                console.log(result) \r\n            })\r\n    }\r\n\r\n    activate = (e: React.MouseEvent<HTMLElement>, gate: string): void => {\r\n        if (this.state.activeElement) this.state.activeElement.style.border = \"\"\r\n        // if change gate while placing multiple gate, remove remaining gate in circuit\r\n        if (this.state.placingGate.length!==0){\r\n            this.state.placingGate.forEach(gateIndex=>{\r\n                let newccimg = this.state.ccimg\r\n                newccimg[gateIndex[0]][gateIndex[1]] = 'e'\r\n                this.setState({ccimg:newccimg})\r\n            })\r\n        }\r\n        if (gate !== this.state.active) {\r\n            const target = e.target as HTMLElement\r\n            target.style.border = \"solid red\"\r\n            this.setState({ active: gate, activeElement: target, placingGate: Array() })\r\n        }\r\n        else this.setState({ active: 'e', placingGate: Array() })\r\n        // console.log(this.state.ccimg)\r\n    }\r\n\r\n    place = (line: number, col: number): void => {\r\n        \r\n        let cc = this.state.cc\r\n        let newccimg: Array<Array<string>> = this.state.ccimg.slice()\r\n        let placingGate = this.state.placingGate.slice()\r\n        let multipleGate: Array<Array<Array<number>>> = this.state.multipleGate.slice()\r\n\r\n        // check if replace on single gate, remove gate first\r\n        const index = cc.findIndex(el => el.line === line && el.col === col)\r\n        if (index !== -1) cc.splice(index, 1)\r\n\r\n        // check if replace on multiple gate, then remove whole gate\r\n        console.log('Number of Multiple gates',multipleGate.length)\r\n        let foundIndex = -1\r\n        foundIndex = multipleGate.findIndex((gatesIndex) =>\r\n            gatesIndex.findIndex((gateIndex) => JSON.stringify([line, col]) === JSON.stringify(gateIndex)) !== -1\r\n        )\r\n        if (foundIndex !== -1) {\r\n            multipleGate[foundIndex].forEach(gateIndex => {\r\n                console.log()\r\n                newccimg[gateIndex[0]][gateIndex[1]] = 'e'\r\n                // pick one line \r\n                let foundIndex2 = -1\r\n                cc.forEach((el,index) => {\r\n                    if(Array.isArray(el.line)){\r\n                        if(el.line[0]===gateIndex[0])foundIndex2 = index\r\n                    }\r\n                })\r\n                if (foundIndex2 !== -1) cc.splice(foundIndex2, 1)\r\n                console.log('p',cc)\r\n            })\r\n            multipleGate.splice(foundIndex, 1)\r\n            this.setState({multipleGate:multipleGate,ccimg:newccimg,cc:cc})\r\n        }\r\n\r\n        if (this.state.active === 'cx') {\r\n            if (this.state.placingGate.length === 0) {\r\n                let newPlace = [line, col]\r\n                placingGate.push(newPlace)\r\n                newccimg[line][col] = 'cx2'\r\n                this.setState({ ccimg: newccimg, placingGate: placingGate })\r\n            }\r\n            else {\r\n                let newPlace = [line, col]\r\n                let control1 = placingGate[0]\r\n                let valid = col === control1[1] && line !== control1[0]\r\n                if (valid) {\r\n                    placingGate.push(newPlace)\r\n                    // rotate\r\n                    if(newPlace[0]<control1[0]) {\r\n                        newccimg[control1[0]][control1[1]] = 'cx4'\r\n                        newccimg[line][col] = 'cx0' \r\n                    }\r\n                    else newccimg[line][col] = 'cx1'\r\n                    let forPush = [[control1[0], control1[1]], [line, col]]\r\n                    // add line between c and x\r\n                    let i = control1[0]<newPlace[0]? control1[0]+1 : newPlace[0]+1\r\n                    let j = control1[0]>newPlace[0]? control1[0] : newPlace[0]\r\n                    console.log(i,j)\r\n                    while (i<j) {\r\n                        newccimg[i][col] = 'cx3'\r\n                        forPush.push([i,col]) \r\n                        i += 1\r\n                    }\r\n                    multipleGate.push(forPush)\r\n                    const newgate = {\r\n                        gate: 'cx',\r\n                        line: [control1[0],newPlace[0]],\r\n                        col: newPlace[1] \r\n                    }\r\n                    cc = [...cc, newgate]\r\n                    this.setState({ ccimg: newccimg, cc: cc, placingGate: Array(),multipleGate:multipleGate}) // for ccx\r\n                }\r\n                else { // remove all cx before\r\n                    newccimg[control1[0]][control1[1]] = 'e'\r\n                    this.setState({ ccimg: newccimg, placingGate: Array() })\r\n                }\r\n            }\r\n\r\n        }\r\n        else if (this.state.active === 'ccx') {\r\n            console.log(placingGate.length)\r\n            // place control1\r\n            if (this.state.placingGate.length === 0) {\r\n                let newPlace = [line, col]\r\n                placingGate.push(newPlace)\r\n                newccimg[line][col] = 'ccx2'\r\n                this.setState({ ccimg: newccimg, placingGate: placingGate })\r\n                \r\n            }\r\n            // place control2\r\n            if (this.state.placingGate.length === 1) {\r\n                let newPlace = [line, col]\r\n                let control1 = placingGate[0]\r\n                let valid = col === control1[1] && line !== control1[0]\r\n                if (valid) {\r\n                    placingGate.push(newPlace)\r\n                    newccimg[line][col] = 'ccx2'\r\n                    this.setState({ ccimg: newccimg, placingGate: placingGate })\r\n                }\r\n                else { // remove all cx before\r\n                    newccimg[control1[0]][control1[1]] = 'e'\r\n                    this.setState({ ccimg: newccimg, placingGate: Array() })\r\n                }\r\n                }\r\n            // place x\r\n            else if (this.state.placingGate.length === 2){\r\n                let newPlace:Array<number> = [line, col]\r\n                let control1:Array<number> = placingGate[0]\r\n                let control2:Array<number> = placingGate[1]\r\n                let valid = col === control1[1] && line !== control1[0] && line !== control2[0]\r\n                if (valid) {\r\n                    placingGate.push(newPlace)\r\n\r\n                    // find index of top, med, bottom line\r\n                    let top:number = Math.min(control1[0],control2[0],newPlace[0])\r\n                    let bottom:number = Math.max(control1[0],control2[0],newPlace[0])\r\n                    let med:number = [control1[0],control2[0],newPlace[0]].find(el=>el!==top&&el!==bottom)!\r\n \r\n                    if(top===newPlace[0]) newccimg[top][col] = 'ccx0'\r\n                    else newccimg[top][col] = 'ccx2'\r\n                    if(bottom===newPlace[0]) newccimg[bottom][col] = 'ccx1'\r\n                    else newccimg[bottom][col] = 'ccx4'\r\n                    if(med===newPlace[0]) newccimg[med][col] = 'ccx00'\r\n                    else newccimg[med][col] = 'ccx5'\r\n\r\n                    let forPush = [[control1[0], control1[1]],[control2[0], control2[1]], [line, col]]\r\n\r\n                    // add line between c and x\r\n                    let i = Math.min(control1[0],control2[0],newPlace[0])+1\r\n                    let j = Math.max(control1[0],control2[0],newPlace[0])\r\n                    console.log(i,j)\r\n                    while (i<j) {\r\n                        if(i!==control1[0] && i!== control2[0] && i!== newPlace[0]){\r\n                        newccimg[i][col] = 'ccx3'\r\n                        forPush.push([i,col]) \r\n                        }\r\n                        i += 1\r\n                    }\r\n\r\n                    multipleGate.push(forPush)\r\n                    const newgate = {\r\n                        gate: 'ccx',\r\n                        line: [control1[0],control2[0],newPlace[0]],\r\n                        col: newPlace[1] \r\n                    }\r\n                    cc = [...cc, newgate] // cannot apply ccx gate\r\n                    this.setState({ ccimg: newccimg, cc: cc, placingGate: Array(),multipleGate:multipleGate}) // clear Placing Gate, Add Miltiple Gate\r\n                }\r\n                else { // remove all ccx before\r\n                    newccimg[control1[0]][control1[1]] = 'e'\r\n                    newccimg[control2[0]][control2[1]] = 'e'\r\n                    this.setState({ ccimg: newccimg, placingGate: Array() })\r\n                }\r\n            }\r\n        }\r\n        else { // Single Qubit Gate\r\n            newccimg[line][col] = this.state.active\r\n\r\n            if (this.state.active !== 'e') {\r\n                const newgate = {\r\n                    gate: this.state.active,\r\n                    line,\r\n                    col\r\n                }\r\n                cc = [...cc, newgate]\r\n            }\r\n\r\n            this.setState({ cc: cc, ccimg: newccimg })\r\n        }\r\n    }\r\n\r\n    reset = () => {\r\n        let ccimg = [eLine.slice(), eLine.slice()]\r\n        let cc = Array()\r\n        this.setState({ ccimg: ccimg, cc: cc, n: 2 })\r\n    }\r\n\r\n    addQubit = () => {\r\n        console.log(this.state)\r\n        let ccimg = this.state.ccimg\r\n        ccimg.push(eLine.slice())\r\n        let n = this.state.n + 1\r\n        this.setState({ ccimg: ccimg, n: n })\r\n    }\r\n\r\n    removeQubit = () => {\r\n        let ccimg = this.state.ccimg\r\n        let removeIndex = Array()\r\n        let multipleGate = this.state.multipleGate\r\n        multipleGate.forEach((gate,index)=>{\r\n            if (gate.findIndex(subgate => subgate[0]===this.state.n-1)!== -1){\r\n            removeIndex.push(index)\r\n            }\r\n        })\r\n\r\n        for (var i = removeIndex.length -1; i >= 0; i--){\r\n            multipleGate[removeIndex[i]].forEach(img=>{\r\n                ccimg[img[0]][img[1]] = 'e'\r\n            })\r\n            multipleGate.splice(removeIndex[i],1);\r\n        }\r\n        console.log(multipleGate.length)\r\n        ccimg.pop()\r\n        let n = this.state.n - 1\r\n        let cc = this.state.cc.filter(el => el.line < n || (Array.isArray(el.line)&&!el.line.includes(n)))\r\n        // console.log(cc)\r\n        this.setState({ ccimg: ccimg, cc: cc, n: n, multipleGate:multipleGate})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"Composer\" id=\"Composer\">\r\n                <br />\r\n                {/* <p className=\"large\">Active: {this.state.active}</p> */}\r\n                <div className=\"gates\">\r\n                    {Object.keys(image).map(key => {\r\n                        return <img className=\"gate\" src={image[key]} onClick={(e) => this.activate(e, key)} />\r\n                    })}\r\n                </div>\r\n                <br />\r\n                <div className=\"maincomposer\">\r\n                    <div className=\"circuit\">\r\n                        {this.state.ccimg.map((line, l:number) => {\r\n                            return ( \r\n                                <Row className=\"row\">\r\n                                    <img src={qubit[l]} className=\"inline\" id=\"first\" />\r\n                                    {line.map((col: string, c: number) => {\r\n                                        return <img className=\"inline\" src={imageInuse[col]} onClick={() => this.place(l, c)} />\r\n                                    })}\r\n                                    <img src={m} className=\"inline\" id=\"last\" />\r\n                                </Row>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"buttonPanel\">\r\n                    <button className=\"btn btn-primary\" id=\"buttonPanel\" onClick={this.run}>Run</button>\r\n                    <button className=\"btn btn-primary\" id=\"buttonPanel\" onClick={this.reset}>Reset</button>\r\n                    <button className=\"btn btn-primary\" id=\"buttonPanel\" disabled={this.state.n > 4} onClick={this.addQubit}>Add Qubit</button>\r\n                    <button className=\"btn btn-primary\" id=\"buttonPanel\" disabled={this.state.n < 2} onClick={this.removeQubit}>Remove Qubit</button>\r\n                </div>\r\n                <div className=\"result\">   \r\n                <Bar\r\n                    data={this.state.result}\r\n                    width={680}\r\n                    height={200}\r\n                    options={{\r\n                        responsive: false,\r\n                        maintainAspectRatio: false,\r\n                        title: {\r\n                            display: false\r\n                        },\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        scales: {\r\n                            xAxes: [{\r\n                                barPercentage: 0.5\r\n                            }],\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true,\r\n                                    min: 0,\r\n                                    max: 100\r\n                                }\r\n                            }]\r\n                        }\r\n                    }}\r\n                />\r\n                <QubieWrapper>\r\n                <Qubie className=\"svg-qubie\" />\r\n                </QubieWrapper>\r\n                </div>     \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Composer;","/app/src/components/Leaderboard/index.tsx",["130","131","132","133","134"],"import React, { Fragment } from 'react';\r\nimport styled from 'styled-components'\r\nimport { userContext } from '../../context/userContext';\r\nimport instance from '../../axiosconfig'\r\nimport { Row } from 'react-bootstrap';\r\nimport Global from './global'\r\nimport { Iuser } from '../../type.modal'\r\n\r\nconst Main = styled.div`\r\nwidth: 60%;\r\nheight: auto;\r\nmargin: 0 auto;\r\npadding: 10px;\r\nposition: relative;\r\nborder: solid green;\r\n`\r\n\r\nconst Filter = styled.div`\r\nwidth: 500px;\r\nheight: 10%;\r\nmargin: 10px auto;\r\npadding: 7.5px;\r\nposition: relative;\r\nborder: solid green;\r\nbutton {\r\n\r\n  float: left;\r\n  margin-left: 10px;\r\n\r\n  .btn-primary {\r\n    font-family: 'Kanit',sans-serif;\r\n    font-size: medium;\r\n    background-color: #A29BFE;\r\n    border-color: #A29BFE;\r\n    color: white;\r\n  }\r\n\r\n  .btn-primary:disabled {\r\n    font-family: 'Kanit',sans-serif;\r\n    font-size: medium;\r\n    background-color: #651FFF;\r\n    border-color: #A29BFE;\r\n    color: white;\r\n}\r\n}\r\n`\r\n\r\ninterface IState {\r\n  global?: boolean,\r\n  data?: {\r\n    index: number;\r\n    name: string;\r\n    image: string;\r\n    score: number;\r\n  }[];\r\n  facebookData?: {\r\n    index: number;\r\n    name: string;\r\n    image: string;\r\n    score: number;\r\n  }[];\r\n  self?: {\r\n    index: number;\r\n    name: string;\r\n    image: string;\r\n    score: number;\r\n  }\r\n}\r\n\r\nclass Leaderboard extends React.Component<Iuser,IState> {\r\n\r\n  state = {\r\n    global: true,\r\n    data: [{\r\n      index: 0,\r\n      name: '',\r\n      image: '',\r\n      score: 0\r\n    }],\r\n    facebookData: [{\r\n      index: 0,\r\n      name: '',\r\n      image: '',\r\n      score: 0\r\n    }],\r\n    self: {\r\n      index: 0,\r\n      name: '',\r\n      image: '',\r\n      score: 0\r\n    },\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\nswitch = () => {this.setState({global:!this.state.global})}\r\n\r\ncomponentDidMount = () => {\r\n  instance.get('http://localhost/getuser')\r\n    .then(res => {\r\n      let data = res.data.sort((a, b) => (a.info.highscore > b.info.highscore) ? -1 : ((b.info.highscore > a.info.highscore) ? 1 : 0));\r\n      let docs = Array()\r\n      data.forEach((person, index) => {\r\n        let doc = {\r\n          index: index + 1,\r\n          name: person.name,\r\n          image: person.image,\r\n          score: person.info.highscore\r\n        }\r\n        docs.push(doc)\r\n      })\r\n      let self = docs.find(person => person.name === this.props.name)!\r\n      this.setState({ data: docs, self: self })\r\n      // let facebookDocs = docs.filter(FB)\r\n      // this.setState({ data: docs, facebookData: facebookDocs, self: self })\r\n    })\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <Main>\r\n      <Filter>\r\n        <button className=\"btn btn-primary\" disabled={this.state.global} onClick={this.switch}>Global</button>\r\n        <button className=\"btn btn-primary\" disabled={!this.state.global} onClick={this.switch}>Friend</button>\r\n      </Filter>\r\n      {this.state.global\r\n        ?<Global data={this.state.data} self={this.state.self}/>\r\n        :<Global data={this.state.facebookData} self={this.state.self}/>\r\n      }\r\n    </Main>\r\n  );\r\n}\r\n}\r\n\r\nexport default Leaderboard;","/app/src/components/Quiz/index.tsx",[],"/app/src/components/DialogBox/index.tsx",[],"/app/src/components/Progressbar/index.tsx",[],"/app/src/components/IntroButton/index.tsx",[],"/app/src/components/DialogBox/Message.tsx",[],"/app/src/components/Leaderboard/person.tsx",["135","136","137"],"import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { Row } from 'react-bootstrap'\r\nimport { Iuser } from '../../type.modal'\r\n\r\nconst Main = styled.div`\r\nposition: relative;\r\nmargin-left: auto;\r\nmargin-right: auto;\r\nmargin-top: 15px;\r\nwidth: 500px;\r\nalign-items: center;\r\n`\r\nconst Scroll = styled(Main)`\r\nheight: 62%;\r\noverflow-y: scroll;\r\noverflow-x: hidden;\r\n&::-webkit-slider-thumb {\r\n    width: 15px;\r\n    height: 15px;\r\n    border:1px solid black;\r\n }\r\n`\r\n\r\nconst CardRow = styled.div`\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    width: 98%;\r\n    border: solid black;\r\n    img {\r\n        border-radius: 50%;\r\n        margin-top: 0px;\r\n        margin-left: 30px;\r\n        float: left;\r\n        height: 60px;\r\n    }\r\n    p { \r\n        font-family: 'Kanit',sans-serif;\r\n        font-size: 23px;\r\n        margin-top: 10px;\r\n        margin-bottom: 10px;\r\n        display: inline-block;\r\n        line-height: 40px;\r\n    }\r\n`\r\n\r\nconst CardSelf = styled(CardRow)`\r\nposition: absolute;\r\n    border: solid black;\r\n    margin-top: 10px;\r\n`\r\n\r\ninterface IProps {\r\n    data: {\r\n        index: number;\r\n        name: string;\r\n        image: string;\r\n        score: number;\r\n    }[];\r\n    self: {\r\n        index: number;\r\n        name: string;\r\n        image: string;\r\n        score: number;\r\n    }\r\n}\r\n\r\nclass Global extends React.Component<IProps> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Scroll>\r\n                    {this.props.data.filter(person => person.index <= 10).map(person => {\r\n                        return (\r\n                            <CardRow>\r\n                                <Row>\r\n                                    <p style={{ marginLeft: \"20px\" }}>{person.index}</p>\r\n                                    <img src={person.image} />\r\n                                    <p style={{ marginLeft: \"35px\" }}>{person.name} </p>\r\n                                    <p style={{ position: \"absolute\", right: \"40px\" }}>{person.score}</p>\r\n                                </Row>\r\n                            </CardRow>\r\n                        )\r\n                    })}\r\n                </Scroll>\r\n                <Main>\r\n\r\n                    <CardSelf>\r\n                        <Row>\r\n                            <p style={{ marginLeft: \"20px\" }}>{this.props.self.index}</p>\r\n                            <img src={this.props.self.image} />\r\n                            <p style={{ marginLeft: \"35px\" }}>{this.props.self.name} </p>\r\n                            <p style={{ position: \"absolute\", right: \"40px\" }}>{this.props.self.score}</p>\r\n                        </Row>\r\n                    </CardSelf>\r\n                </Main>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Person;\r\n",{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":75,"column":29,"nodeType":"144","messageId":"145","endLine":75,"endColumn":31},{"ruleId":"146","severity":1,"message":"147","line":78,"column":15,"nodeType":"148","endLine":78,"endColumn":43},{"ruleId":"146","severity":1,"message":"147","line":82,"column":13,"nodeType":"148","endLine":82,"endColumn":42},{"ruleId":"142","severity":1,"message":"143","line":87,"column":28,"nodeType":"144","messageId":"145","endLine":87,"endColumn":30},{"ruleId":"149","severity":1,"message":"150","line":14,"column":9,"nodeType":"151","messageId":"152","endLine":14,"endColumn":13},{"ruleId":"149","severity":1,"message":"153","line":5,"column":8,"nodeType":"151","messageId":"152","endLine":5,"endColumn":12},{"ruleId":"146","severity":1,"message":"147","line":41,"column":33,"nodeType":"148","endLine":41,"endColumn":81},{"ruleId":"146","severity":1,"message":"147","line":57,"column":33,"nodeType":"148","endLine":57,"endColumn":81},{"ruleId":"146","severity":1,"message":"147","line":73,"column":29,"nodeType":"148","endLine":73,"endColumn":77},{"ruleId":"146","severity":1,"message":"147","line":89,"column":29,"nodeType":"148","endLine":89,"endColumn":77},{"ruleId":"154","severity":1,"message":"155","line":85,"column":22,"nodeType":"156","messageId":"157","endLine":85,"endColumn":29,"fix":"158"},{"ruleId":"154","severity":1,"message":"155","line":86,"column":23,"nodeType":"156","messageId":"157","endLine":86,"endColumn":30,"fix":"159"},{"ruleId":"154","severity":1,"message":"155","line":89,"column":13,"nodeType":"156","messageId":"157","endLine":89,"endColumn":20,"fix":"160"},{"ruleId":"161","severity":1,"message":"162","line":115,"column":39,"nodeType":"163","endLine":115,"endColumn":69},{"ruleId":"154","severity":1,"message":"155","line":127,"column":79,"nodeType":"156","messageId":"157","endLine":127,"endColumn":86,"fix":"164"},{"ruleId":"154","severity":1,"message":"155","line":129,"column":56,"nodeType":"156","messageId":"157","endLine":129,"endColumn":63,"fix":"165"},{"ruleId":"154","severity":1,"message":"155","line":204,"column":75,"nodeType":"156","messageId":"157","endLine":204,"endColumn":82,"fix":"166"},{"ruleId":"154","severity":1,"message":"155","line":208,"column":67,"nodeType":"156","messageId":"157","endLine":208,"endColumn":74,"fix":"167"},{"ruleId":"154","severity":1,"message":"155","line":235,"column":67,"nodeType":"156","messageId":"157","endLine":235,"endColumn":74,"fix":"168"},{"ruleId":"154","severity":1,"message":"155","line":280,"column":75,"nodeType":"156","messageId":"157","endLine":280,"endColumn":82,"fix":"169"},{"ruleId":"154","severity":1,"message":"155","line":285,"column":67,"nodeType":"156","messageId":"157","endLine":285,"endColumn":74,"fix":"170"},{"ruleId":"154","severity":1,"message":"155","line":307,"column":18,"nodeType":"156","messageId":"157","endLine":307,"endColumn":25,"fix":"171"},{"ruleId":"154","severity":1,"message":"155","line":321,"column":27,"nodeType":"156","messageId":"157","endLine":321,"endColumn":34,"fix":"172"},{"ruleId":"146","severity":1,"message":"147","line":351,"column":32,"nodeType":"148","endLine":351,"endColumn":112},{"ruleId":"146","severity":1,"message":"147","line":360,"column":37,"nodeType":"148","endLine":360,"endColumn":89},{"ruleId":"146","severity":1,"message":"147","line":362,"column":48,"nodeType":"148","endLine":362,"endColumn":129},{"ruleId":"146","severity":1,"message":"147","line":364,"column":37,"nodeType":"148","endLine":364,"endColumn":81},{"ruleId":"149","severity":1,"message":"173","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":25},{"ruleId":"149","severity":1,"message":"174","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":21},{"ruleId":"149","severity":1,"message":"175","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":13},{"ruleId":"176","severity":1,"message":"177","line":94,"column":3,"nodeType":"178","messageId":"179","endLine":96,"endColumn":4},{"ruleId":"154","severity":1,"message":"155","line":104,"column":18,"nodeType":"156","messageId":"157","endLine":104,"endColumn":25,"fix":"180"},{"ruleId":"149","severity":1,"message":"181","line":4,"column":10,"nodeType":"151","messageId":"152","endLine":4,"endColumn":15},{"ruleId":"146","severity":1,"message":"147","line":80,"column":37,"nodeType":"148","endLine":80,"endColumn":63},{"ruleId":"146","severity":1,"message":"147","line":93,"column":29,"nodeType":"148","endLine":93,"endColumn":64},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'path' is assigned a value but never used.","Identifier","unusedVar","'Drag' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","CallExpression","useLiteral",{"range":"184","text":"185"},{"range":"186","text":"185"},{"range":"187","text":"185"},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",{"range":"188","text":"185"},{"range":"189","text":"185"},{"range":"190","text":"185"},{"range":"191","text":"185"},{"range":"192","text":"185"},{"range":"193","text":"185"},{"range":"194","text":"185"},{"range":"195","text":"185"},{"range":"196","text":"185"},"'Fragment' is defined but never used.","'userContext' is defined but never used.","'Row' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",{"range":"197","text":"185"},"'Iuser' is defined but never used.","no-global-assign","no-unsafe-negation",[3387,3394],"[]",[3419,3426],[3504,3511],[5033,5040],[5111,5118],[8509,8516],[8752,8759],[9893,9900],[12166,12173],[12502,12509],[13071,13078],[13455,13462],[2053,2060]]